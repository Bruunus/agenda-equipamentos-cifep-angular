






<!-- <div>
  <h3>Reserva eventual</h3>

  <form [formGroup]="formValidation" #formDir="ngForm">



  <br><br>












    <br><br>

    <label for="dataRetirada">Data retirada:</label> &nbsp;
  <input #valid type="date" formControlName="dataRetirada" required> &nbsp;
  <div *ngIf="dataRetirada!.invalid && formDir.submitted" class="validation-error">
    <span *ngIf="dataRetirada.errors?.['required']" style="font-size: 0.8rem; color: tomato;">
      Insira a data de início da reserva
    </span>
    <p *ngIf="nome.errors?.['maxlength']">Até 30 caracter</p>
  </div>




  <label for="hr-agendamento">Horário retirada:</label>
  <select #valid name="horaRetirada"  formControlName="horaInicioSelect" required>
      <option name="horaRetirada" *ngFor="let option of optionsHours" [value]="option.valor">{{ option.descricao }}</option>
  </select>
  <div *ngIf="horaInicioSelect!.invalid && formDir.submitted" class="validation-error">
    <span *ngIf="horaInicioSelect.errors?.['required']" style="font-size: 0.8rem; color: tomato;">
      Insira o horário da retirada
    </span>
    <p *ngIf="nome.errors?.['maxlength']">Até 30 caracter</p>
  </div>



  <div class="row">
    <div class="col">

      <label for="dt-agendamento">Data devolução:</label> &nbsp;
      <input #valid style="margin-left: 1.06em;" type="date" name="dataDevolucao" formControlName="dataDevolucao" required> &nbsp;
      <div *ngIf="dataDevolucao!.invalid && formDir.submitted" class="validation-error">
        <span *ngIf="dataDevolucao.errors?.['required']" style="font-size: 0.8rem; color: tomato;">
          Insira a data de devolução da reserva
        </span>
        <p *ngIf="nome.errors?.['maxlength']">Até 30 caracter</p>
      </div>

      Validador de datas
      <div *ngIf="formValidation.controls['dataDevolucao'].value < formValidation.controls['dataRetirada'].value">
        <span style="font-size: 0.8rem; color: tomato;">
          A data de devolução não pode ser menor que a data de retirada
        </span>
      </div>


      <label for="hr-agendamento">Horário devolução:</label> &nbsp;
      <select #valid name="horaDevolucaoSelect" formControlName="horaDevolucaoSelect" required>
        <option name="horaDevolucao" *ngFor="let option of optionsHours" [value]="option.valor">{{ option.descricao }}</option>
      </select>
      <div *ngIf="horaDevolucaoSelect!.invalid && formDir.submitted" class="validation-error">
        <span *ngIf="horaDevolucaoSelect.errors?.['required']" style="font-size: 0.8rem; color: tomato;">
          Insira o horário da devolução
        </span>
        <p *ngIf="nome.errors?.['maxlength']">Até 30 caracter</p>
      </div>






      </div>
  </div>

   <button type="submit" style="width: 150px; margin-block-start: 50px;">Criar</button>


  </form>



</div> -->




<!-- <span style="margin-top: 10rem;">------------------ESPAÇO------------------</span>

<p>Teste</p>
<p>EQUIPAMENTO: </p>
<p>QUANTIDADE: </p> -->


<!-- criada -->
<!-- executando -->
<!-- finalizada -->
<!-- rollback -->


<!--
<table>
  <tr><th colspan="4">Exemplo</th></tr>
  <tr>
    <td class="criada">criada</td>
    <td class="executando">executando</td>
    <td class="finalizada">finalizada</td>
    <td class="rollback">rollback</td>
  </tr>
</table>


<table class="sprint">
  <thead>
    <tr class="left;" style="padding: 7pt;"><th colspan="3">Sprints</th></tr>
    <tr>
      <th class="left;">Sprint</th>
      <th class="left;">Iniciado</th>
      <th class="left;">Finalizado</th>
    </tr>

  </thead>
  <tbody>
    <tr class="finalizada">
      <td>
        Ao salvar verificar se a lista está vazia, caso verdadeiro retorne erro
      <td>24/09/2024 - 19:00</td>
      <td>24/09/2024 - 20:00</td>
    </tr>

    <tr class="rollback">
      <td>
        Limpar todos os campos após clicar no botão "Criar"
      <td>24/09/2024 - 19:00</td>
      <td></td>
    </tr>

    <tr class="finalizada">
      <td>
        Criar validação: Nenhum campo pode estar vazio
      <td>24/09/2024 - 19:00</td>
      <td>02/11/2024 - 18:32</td>
    </tr>

    <tr class="rollback">
      Criar validação para adicionar data agendada:
      <td>
      <td>24/09/2024 - 19:00</td>
      <td></td>
    </tr>

    <tr class="rollback" colspan="3">
      <ul>
        <li>
          <b>Para data de retirada</b>
          <ul>
            <li>data de inicio não pode ser menor que a data atual do sistema</li>
            <li>Ao inserir a data de inicio o mesmo valor deve ser adicionado na data fim</li>
          </ul>
        </li>
      </ul>
    </tr>

    <tr class="rollback" colspan="3">
      <ul>
        <li>
          <b>Para de devolução</b>
          <ul>
            <li>A data fim não pode ser menor que a data de início</li>
          </ul>
        </li>
      </ul>
    </tr>

    <tr class="rollback" colspan="3">
      <ul>
        <li>
          <b>Para hora de devolução</b>
          <ul>
            <li>
              Se a hora de devolução for menor que a hora de retirada então a devolução não é no mesmo dia. Para isso
              o sistema deve colher as datas de retirada e data de devolução, se caso as duas foram iguais então o
              sistema deve:
              <ul>
                <li>Verificar em que dia da semana cai esta data, se caso:</li>
                <ul>
                  <li>Cair na sexta-feira - o Sistema deve modificar a data de devolução para a próxima segunda-feira (+ 3 dias)</li>
                  <li>Se cair entre segunda-feira até quinta-feira o sistema deve modificar a data de devolução para o dia seguinte</li>
                </ul>
              </ul>

              a data de devolução for maior e diferente da data de retirada (ou seja, a devolução não é para o mesmo dia)
              então o sistema nãi faz nada e pode computar o valor inserido na data de devolução normalmente.
              <ul>
                <li>Não pode uma data de devolução ser menor que a data de retirada</li>
                <li>Não pode fazer um agendamento com datas anteriores ao dia atual <br>
                  Se caso a hora de devolução for menor que a hora de inicio o sistema deve alterar a data de devlução
                  para o dia seguinte pega referenciando a data de início
                </li>
              </ul>
            </li>
          </ul>
        </li>
      </ul>
    </tr>


    <tr class="rollback">
      <td>
        Criar validação para <b>adicionar equipamento</b>:
      <td>24/09/2024 - 19:00</td>
      <td></td>
    </tr>

    <tr class="finalizada" colspan="3">
      <ul>
        <li>Não pode adicionar um equipamento sem quantidade</li>
        <li>Não pode adicionar uma quantidade sem equipamento</li>
        <li>Não pode adicionar o mesmo equipamento 2x</li>
        <li>
          Validade a quantidade solicitada ao adicionar com o estoque disponível, caso não tiver disponível emita o aviso
            e não deixa passar o formulário</li>
      </ul>
    </tr>

    <tr class="rollback">
      <td>
        Liberar o campo 'sobrenome' na classe eventual.compoent.ts quando o backend estiver ajustado
      <td>24/09/2024 - 19:00</td>
      <td></td>
    </tr>

    <tr class="rollback">
      <td>
        Tratar do [option] 'Outros' => Ao ser selecionado junto com a quantidade, dentro da tabela de equipamentos
        deve aparecer um input para o usuário fornecer a descrição do equipamento. <br>
        Salve este valor no banco e forneça um aviso "Este equipamento não será monitorado no painel de estoque.
        para isso adicione esse novo equipamentos em Configurações > Adicionar novo equipamento"
      <td>24/09/2024 - 19:00</td>
      <td></td>
    </tr>

    <tr class="rollback">
      <td>
        Ao dar submit para criar a reserva, o sistema precisa fazer uma nova busca dos dados e comparação novamente para
        saber se nesse meio tempo teve alteração no estoque. Se sim deve sinalizar o equipamento esgotado e notificar.
        <br>
        Cria no backend um validador de quantidade de estoque, que antes de salver no banco ele precisa realizar
        uma última verificação de disponibilidade. Caso não tenha deve lançar uma exception
      <td>24/09/2024 - 19:00</td>
      <td></td>
    </tr>

    <tr class="rollback">
      <td>
        Limpar a lista de equipamentos visual -  Quando o submit der certo limpe a lista.
      <td>24/09/2024 - 19:00</td>
      <td></td>
    </tr>

    <tr class="rollback">
      <td>
        Criar um classe de sistema de erros de logs com com "nome da funcionalidade e código de erro "er0001" "
      <td>24/09/2024 - 19:00</td>
      <td></td>
    </tr>

    <tr class="rollback">
      <td>
        Aplicar o regex nos campos impust e criar validações para os campos (Verifique também a capacidade máxima de caracteres
        definidas nas tabelas)
      <td>24/09/2024 - 19:00</td>
      <td></td>
    </tr>

    <tr class="rollback">
      <td>
        A hora de retirada não pode ser igual a hora de devolução
      <td>24/09/2024 - 19:00</td>
      <td></td>
    </tr>


  </tbody>
</table>
 -->
